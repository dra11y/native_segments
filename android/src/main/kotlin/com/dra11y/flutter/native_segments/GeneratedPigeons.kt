// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.dra11y.flutter.native_segments

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeSegment (
  val title: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeSegment {
      val title = list[0] as? String
      return NativeSegment(title)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RGBAColor (
  val red: Double? = null,
  val green: Double? = null,
  val blue: Double? = null,
  val alpha: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RGBAColor {
      val red = list[0] as? Double
      val green = list[1] as? Double
      val blue = list[2] as? Double
      val alpha = list[3] as? Double
      return RGBAColor(red, green, blue, alpha)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      red,
      green,
      blue,
      alpha,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeSegmentsApiStyle (
  val isDarkTheme: Boolean? = null,
  val backgroundColor: RGBAColor? = null,
  val backgroundColorDark: RGBAColor? = null,
  val selectedSegmentColor: RGBAColor? = null,
  val textColor: RGBAColor? = null,
  val selectedTextColor: RGBAColor? = null,
  val enableDynamicType: Boolean? = null,
  val variableWidths: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeSegmentsApiStyle {
      val isDarkTheme = list[0] as? Boolean
      val backgroundColor: RGBAColor? = (list[1] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val backgroundColorDark: RGBAColor? = (list[2] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val selectedSegmentColor: RGBAColor? = (list[3] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val textColor: RGBAColor? = (list[4] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val selectedTextColor: RGBAColor? = (list[5] as? List<Any?>)?.let {
        RGBAColor.fromList(it)
      }
      val enableDynamicType = list[6] as? Boolean
      val variableWidths = list[7] as? Boolean
      return NativeSegmentsApiStyle(isDarkTheme, backgroundColor, backgroundColorDark, selectedSegmentColor, textColor, selectedTextColor, enableDynamicType, variableWidths)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isDarkTheme,
      backgroundColor?.toList(),
      backgroundColorDark?.toList(),
      selectedSegmentColor?.toList(),
      textColor?.toList(),
      selectedTextColor?.toList(),
      enableDynamicType,
      variableWidths,
    )
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NativeSegmentsFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NativeSegmentsFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun wantsHeight(idArg: String, heightArg: Double, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeSegmentsFlutterApi.wantsHeight", codec)
    channel.send(listOf(idArg, heightArg)) {
      callback()
    }
  }
  fun valueChanged(idArg: String, selectedIndexArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeSegmentsFlutterApi.valueChanged", codec)
    channel.send(listOf(idArg, selectedIndexArg)) {
      callback()
    }
  }
  fun refresh(idArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeSegmentsFlutterApi.refresh", codec)
    channel.send(listOf(idArg)) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object NativeSegmentsHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeSegment.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeSegmentsApiStyle.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RGBAColor.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeSegment -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeSegmentsApiStyle -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is RGBAColor -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeSegmentsHostApi {
  /**
   * Pigeon currently only supports one channel and one shared API instance.
   * Therefore, we must register our state IDs with the API on the native side
   * and send commands to the appropriate state by its instance id, otherwise
   * all commands are sent to the final view instance on the screen.
   */
  fun setSegments(id: String, segments: List<NativeSegment>, selectedIndex: Long?): Boolean
  fun setStyle(id: String, style: NativeSegmentsApiStyle): Boolean
  fun setSelected(id: String, index: Long?): Boolean

  companion object {
    /** The codec used by NativeSegmentsHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      NativeSegmentsHostApiCodec
    }
    /** Sets up an instance of `NativeSegmentsHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeSegmentsHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeSegmentsHostApi.setSegments", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val idArg = args[0] as String
              val segmentsArg = args[1] as List<NativeSegment>
              val selectedIndexArg = args[2].let { if (it is Int) it.toLong() else it as? Long }
              wrapped = listOf<Any?>(api.setSegments(idArg, segmentsArg, selectedIndexArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeSegmentsHostApi.setStyle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val idArg = args[0] as String
              val styleArg = args[1] as NativeSegmentsApiStyle
              wrapped = listOf<Any?>(api.setStyle(idArg, styleArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeSegmentsHostApi.setSelected", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val idArg = args[0] as String
              val indexArg = args[1].let { if (it is Int) it.toLong() else it as? Long }
              wrapped = listOf<Any?>(api.setSelected(idArg, indexArg))
            } catch (exception: Error) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
