// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeSegment {
  var title: String? = nil

  static func fromList(_ list: [Any?]) -> NativeSegment? {
    let title = list[0] as? String 

    return NativeSegment(
      title: title
    )
  }
  func toList() -> [Any?] {
    return [
      title,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RGBAColor {
  var red: Double? = nil
  var green: Double? = nil
  var blue: Double? = nil
  var alpha: Double? = nil

  static func fromList(_ list: [Any?]) -> RGBAColor? {
    let red = list[0] as? Double 
    let green = list[1] as? Double 
    let blue = list[2] as? Double 
    let alpha = list[3] as? Double 

    return RGBAColor(
      red: red,
      green: green,
      blue: blue,
      alpha: alpha
    )
  }
  func toList() -> [Any?] {
    return [
      red,
      green,
      blue,
      alpha,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeSegmentsApiStyle {
  var isDarkTheme: Bool? = nil
  var backgroundColor: RGBAColor? = nil
  var backgroundColorDark: RGBAColor? = nil
  var selectedSegmentColor: RGBAColor? = nil
  var textColor: RGBAColor? = nil
  var selectedTextColor: RGBAColor? = nil
  var enableDynamicType: Bool? = nil
  var variableWidths: Bool? = nil

  static func fromList(_ list: [Any?]) -> NativeSegmentsApiStyle? {
    let isDarkTheme = list[0] as? Bool 
    var backgroundColor: RGBAColor? = nil
    if let backgroundColorList = list[1] as? [Any?] {
      backgroundColor = RGBAColor.fromList(backgroundColorList)
    }
    var backgroundColorDark: RGBAColor? = nil
    if let backgroundColorDarkList = list[2] as? [Any?] {
      backgroundColorDark = RGBAColor.fromList(backgroundColorDarkList)
    }
    var selectedSegmentColor: RGBAColor? = nil
    if let selectedSegmentColorList = list[3] as? [Any?] {
      selectedSegmentColor = RGBAColor.fromList(selectedSegmentColorList)
    }
    var textColor: RGBAColor? = nil
    if let textColorList = list[4] as? [Any?] {
      textColor = RGBAColor.fromList(textColorList)
    }
    var selectedTextColor: RGBAColor? = nil
    if let selectedTextColorList = list[5] as? [Any?] {
      selectedTextColor = RGBAColor.fromList(selectedTextColorList)
    }
    let enableDynamicType = list[6] as? Bool 
    let variableWidths = list[7] as? Bool 

    return NativeSegmentsApiStyle(
      isDarkTheme: isDarkTheme,
      backgroundColor: backgroundColor,
      backgroundColorDark: backgroundColorDark,
      selectedSegmentColor: selectedSegmentColor,
      textColor: textColor,
      selectedTextColor: selectedTextColor,
      enableDynamicType: enableDynamicType,
      variableWidths: variableWidths
    )
  }
  func toList() -> [Any?] {
    return [
      isDarkTheme,
      backgroundColor?.toList(),
      backgroundColorDark?.toList(),
      selectedSegmentColor?.toList(),
      textColor?.toList(),
      selectedTextColor?.toList(),
      enableDynamicType,
      variableWidths,
    ]
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class NativeSegmentsFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func wantsHeight(id idArg: String, height heightArg: Double, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeSegmentsFlutterApi.wantsHeight", binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg, heightArg] as [Any?]) { _ in
      completion()
    }
  }
  func valueChanged(id idArg: String, selectedIndex selectedIndexArg: Int32, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeSegmentsFlutterApi.valueChanged", binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg, selectedIndexArg] as [Any?]) { _ in
      completion()
    }
  }
  func refresh(id idArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeSegmentsFlutterApi.refresh", binaryMessenger: binaryMessenger)
    channel.sendMessage([idArg] as [Any?]) { _ in
      completion()
    }
  }
}
private class NativeSegmentsHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return NativeSegment.fromList(self.readValue() as! [Any])
      case 129:
        return NativeSegmentsApiStyle.fromList(self.readValue() as! [Any])
      case 130:
        return RGBAColor.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class NativeSegmentsHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeSegment {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeSegmentsApiStyle {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? RGBAColor {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeSegmentsHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeSegmentsHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeSegmentsHostApiCodecWriter(data: data)
  }
}

class NativeSegmentsHostApiCodec: FlutterStandardMessageCodec {
  static let shared = NativeSegmentsHostApiCodec(readerWriter: NativeSegmentsHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeSegmentsHostApi {
  /// Pigeon currently only supports one channel and one shared API instance.
  /// Therefore, we must register our state IDs with the API on the native side
  /// and send commands to the appropriate state by its instance id, otherwise
  /// all commands are sent to the final view instance on the screen.
  func setSegments(id: String, segments: [NativeSegment], selectedIndex: Int32?) throws -> Bool
  func setStyle(id: String, style: NativeSegmentsApiStyle) throws -> Bool
  func setSelected(id: String, index: Int32?) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeSegmentsHostApiSetup {
  /// The codec used by NativeSegmentsHostApi.
  static var codec: FlutterStandardMessageCodec { NativeSegmentsHostApiCodec.shared }
  /// Sets up an instance of `NativeSegmentsHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeSegmentsHostApi?) {
    /// Pigeon currently only supports one channel and one shared API instance.
    /// Therefore, we must register our state IDs with the API on the native side
    /// and send commands to the appropriate state by its instance id, otherwise
    /// all commands are sent to the final view instance on the screen.
    let setSegmentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeSegmentsHostApi.setSegments", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSegmentsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let segmentsArg = args[1] as! [NativeSegment]
        let selectedIndexArg = args[2] as? Int32
        do {
          let result = try api.setSegments(id: idArg, segments: segmentsArg, selectedIndex: selectedIndexArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSegmentsChannel.setMessageHandler(nil)
    }
    let setStyleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeSegmentsHostApi.setStyle", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setStyleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let styleArg = args[1] as! NativeSegmentsApiStyle
        do {
          let result = try api.setStyle(id: idArg, style: styleArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setStyleChannel.setMessageHandler(nil)
    }
    let setSelectedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeSegmentsHostApi.setSelected", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSelectedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let indexArg = args[1] as? Int32
        do {
          let result = try api.setSelected(id: idArg, index: indexArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSelectedChannel.setMessageHandler(nil)
    }
  }
}
