// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class NativeSegment {
  NativeSegment({
    this.title,
  });

  String? title;

  Object encode() {
    return <Object?>[
      title,
    ];
  }

  static NativeSegment decode(Object result) {
    result as List<Object?>;
    return NativeSegment(
      title: result[0] as String?,
    );
  }
}

class RGBAColor {
  RGBAColor({
    this.red,
    this.green,
    this.blue,
    this.alpha,
  });

  double? red;

  double? green;

  double? blue;

  double? alpha;

  Object encode() {
    return <Object?>[
      red,
      green,
      blue,
      alpha,
    ];
  }

  static RGBAColor decode(Object result) {
    result as List<Object?>;
    return RGBAColor(
      red: result[0] as double?,
      green: result[1] as double?,
      blue: result[2] as double?,
      alpha: result[3] as double?,
    );
  }
}

class NativeSegmentsApiStyle {
  NativeSegmentsApiStyle({
    this.isDarkTheme,
    this.backgroundColor,
    this.backgroundColorDark,
    this.selectedSegmentColor,
    this.textColor,
    this.selectedTextColor,
    this.enableDynamicType,
    this.variableWidths,
  });

  bool? isDarkTheme;

  RGBAColor? backgroundColor;

  RGBAColor? backgroundColorDark;

  RGBAColor? selectedSegmentColor;

  RGBAColor? textColor;

  RGBAColor? selectedTextColor;

  bool? enableDynamicType;

  bool? variableWidths;

  Object encode() {
    return <Object?>[
      isDarkTheme,
      backgroundColor?.encode(),
      backgroundColorDark?.encode(),
      selectedSegmentColor?.encode(),
      textColor?.encode(),
      selectedTextColor?.encode(),
      enableDynamicType,
      variableWidths,
    ];
  }

  static NativeSegmentsApiStyle decode(Object result) {
    result as List<Object?>;
    return NativeSegmentsApiStyle(
      isDarkTheme: result[0] as bool?,
      backgroundColor: result[1] != null
          ? RGBAColor.decode(result[1]! as List<Object?>)
          : null,
      backgroundColorDark: result[2] != null
          ? RGBAColor.decode(result[2]! as List<Object?>)
          : null,
      selectedSegmentColor: result[3] != null
          ? RGBAColor.decode(result[3]! as List<Object?>)
          : null,
      textColor: result[4] != null
          ? RGBAColor.decode(result[4]! as List<Object?>)
          : null,
      selectedTextColor: result[5] != null
          ? RGBAColor.decode(result[5]! as List<Object?>)
          : null,
      enableDynamicType: result[6] as bool?,
      variableWidths: result[7] as bool?,
    );
  }
}

abstract class NativeSegmentsFlutterApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void wantsHeight(String id, double height);

  void valueChanged(String id, int selectedIndex);

  void refresh(String id);

  static void setup(NativeSegmentsFlutterApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeSegmentsFlutterApi.wantsHeight', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.wantsHeight was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.wantsHeight was null, expected non-null String.');
          final double? arg_height = (args[1] as double?);
          assert(arg_height != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.wantsHeight was null, expected non-null double.');
          api.wantsHeight(arg_id!, arg_height!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeSegmentsFlutterApi.valueChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.valueChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.valueChanged was null, expected non-null String.');
          final int? arg_selectedIndex = (args[1] as int?);
          assert(arg_selectedIndex != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.valueChanged was null, expected non-null int.');
          api.valueChanged(arg_id!, arg_selectedIndex!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeSegmentsFlutterApi.refresh', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.refresh was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.NativeSegmentsFlutterApi.refresh was null, expected non-null String.');
          api.refresh(arg_id!);
          return;
        });
      }
    }
  }
}

class _NativeSegmentsHostApiCodec extends StandardMessageCodec {
  const _NativeSegmentsHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeSegment) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeSegmentsApiStyle) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is RGBAColor) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return NativeSegment.decode(readValue(buffer)!);
      case 129:
        return NativeSegmentsApiStyle.decode(readValue(buffer)!);
      case 130:
        return RGBAColor.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeSegmentsHostApi {
  /// Constructor for [NativeSegmentsHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeSegmentsHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativeSegmentsHostApiCodec();

  /// Pigeon currently only supports one channel and one shared API instance.
  /// Therefore, we must register our state IDs with the API on the native side
  /// and send commands to the appropriate state by its instance id, otherwise
  /// all commands are sent to the final view instance on the screen.
  Future<bool> setSegments(String arg_id, List<NativeSegment?> arg_segments,
      int? arg_selectedIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeSegmentsHostApi.setSegments', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_segments, arg_selectedIndex])
            as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> setStyle(String arg_id, NativeSegmentsApiStyle arg_style) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeSegmentsHostApi.setStyle', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_style]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> setSelected(String arg_id, int? arg_index) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeSegmentsHostApi.setSelected', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}
